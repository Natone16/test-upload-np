/*game.c 
 * Created by Tony Booth and Nathaniel Park
 * Game "Mega coins" where the objective is to collect coins
 *  while protecting your wall.
 * */

#include "system.h"
#include "display.h"
#include "button.h"
#include "pio.h"
#include <avr/io.h>
#include "pacer.h"
#include "ledmat.h"
#include "navswitch.h"
#include "timer.h"
#include <avr/io.h>
#include "pacer.h"
#include "ledmat.h"
#include "navswitch.h"
#include "task.h"
#include "startscreen.h"
#include "tinygl.h"
#include "led.h"
#include "ir_uart.h"
#include "../fonts/font3x5_1.h"

#define PACER_RATE 500
#define WALL_ROW 0
#define PLAYER_ROW 2
#define NUM_ROW 7
#define NUM_COL 5
#define COIN_MOVE_RATE 150
#define BONUS_MAX 3
#define ENOUGH_COINS 10
#define MAX_COUNT 50

static const uint8_t comms[] =
{
    0b10011000,
    0b01001000,
    0b00000000
};

typedef struct pos {
    uint8_t col;
    uint8_t row;
} Pos;

typedef struct counter_List {
    uint8_t bonus;
    uint8_t coin;
    uint8_t score;
    uint8_t flash;
} Counter_List;

typedef struct flag_List {
    bool end;
    bool no_wall;
    bool bonus;       
} Flag_List;

typedef struct object_List {
    Pos player;
    Pos bonus;
} Object_List;

void init_function (void) {
    system_init ();
    pacer_init (PACER_RATE);
    ledmat_init ();
    button_init (); 
    display_init ();
    navswitch_init ();
    startscreen_init();
    ir_uart_init ();
    led_init ();
    led_set(LED1,0);
}

Counter_List ledmat_display (Object_List* objects, uint8_t* coin_pos_col, uint8_t* coin_pos_row, Counter_List counter, Flag_List flag, uint8_t *wall_active_array) 
{
    uint8_t k;
    display_clear ();
    display_pixel_set (objects->player.col, objects->player.row, 1);
    for (k = 0; k < (NUM_ROW); k++) {
        display_pixel_set (coin_pos_col[k], coin_pos_row[k], 1);
    }
    for (k = 0; k < NUM_COL; k++){ 
        display_pixel_set (k, WALL_ROW, wall_active_array[k]);
    }
    if (flag.bonus && (counter.flash > 2)) {
        counter.flash = 0;
        display_pixel_set (objects->bonus.col, objects->bonus.row, 1);
    }
    counter.flash++;
    display_update ();
    pacer_wait ();
    return counter;
}

Object_List* navswitch_controls_dir (Object_List* objects) {
    if ((navswitch_push_event_p (NAVSWITCH_EAST)) && (objects->player.col < (NUM_COL-1))) {
        objects->player.col += 1;
    }
    else if ((navswitch_push_event_p (NAVSWITCH_WEST)) && (objects->player.col > 0)) {
        objects->player.col -= 1;
    }
    else if ((navswitch_push_event_p (NAVSWITCH_EAST)) && (objects->player.col == (NUM_COL-1))) {
        objects->player.col = 0;
    }
    else if ((navswitch_push_event_p (NAVSWITCH_WEST)) && (objects->player.col == 0)) {
        objects->player.col = NUM_COL-1;
    }
    return objects;
}



Counter_List build_wall (uint8_t* wall_active_array, Object_List* objects, Counter_List counter) {
    if (navswitch_push_event_p (NAVSWITCH_NORTH) && (counter.bonus != 0)) {
        wall_active_array[objects->player.col] = 1;
        counter.bonus--;
    }
    return counter;
}

int destroy_wall (const uint8_t* comms, Object_List* objects, int ir_count) 
{
    uint8_t player_col = objects->player.col;
    if (ir_count < MAX_COUNT) {
        
        comm_transmit(player_col, comms[0]);
        ir_count++;
    }
            
    return ir_count;
}

uint8_t GetRand(uint8_t min, uint8_t max)
{

  uint8_t rc;
  rc = (rand() % (max - min + 1) + min);
  //rc = (timer_get() % (max - min + 1) + min);
  
  return (rc);
}

uint8_t gen_Rand(uint8_t coin_freq)
{
  uint8_t r;
  r = GetRand(0, coin_freq);
  return(r);
}


Flag_List check_game_end (uint8_t *wall_active_array, Flag_List flag) {
    uint8_t k = 0;
    for (k = 0; k < NUM_COL; k++)
    {
        if (wall_active_array[k] == 1){
            flag.no_wall = 0;
        }
    }
    if (flag.no_wall){
        for (k = 0; k < MAX_COUNT; k++) {
            pacer_wait();
            comm_transmit(comms[2], comms[1]);
        }
        flag.end = 1;
    }
    return flag;
}

uint8_t coin_speed_increase(Counter_List counter, uint8_t coin_freq)
{
    /* The frequency of the coins increases every 10 coins collected till it hits max.*/
    if (counter.score % 10 == 0) {
        if (coin_freq > 4) {
            coin_freq--;
        }
    }
    return coin_freq;
}
        
int main (void)
{
   
    uint8_t i = 0;
    uint8_t k = 0;
    uint8_t coin_freq = 20;
    uint8_t coin_pos_col[NUM_ROW] = {5,5,5,5,5,5,5};
    uint8_t coin_pos_row[NUM_ROW] = {0,1,2,3,4,5,6};
    uint8_t wall_active_array[NUM_COL] = {1,1,1,1,1};
    Flag_List flag;
    flag.end = 0;
    flag.bonus = 0;
    Object_List object_data;
    Object_List* objects = &object_data;
    objects->player.col = 2;
    objects->player.row = PLAYER_ROW;
    objects->bonus.col = gen_Rand (NUM_COL-1);
    objects->bonus.row = NUM_ROW;
    Counter_List counter;
    counter.bonus = 0;
    counter.coin = 0;
    counter.score = 0;
    counter.flash = 0;
    init_function ();
    startscreen_press_start();
    int ir_count = 100;
    while (!flag.end) {
        flag.no_wall = 1;
        pacer_wait();
         if (ir_uart_read_ready_p ())
        {
            *wall_active_array = comm_receive (comms,wall_active_array);
            
        }
        counter = ledmat_display (objects, coin_pos_col, coin_pos_row, counter, flag, wall_active_array);
        navswitch_update ();
        objects = navswitch_controls_dir (objects);
        counter = build_wall (wall_active_array, objects, counter);
        if ((navswitch_push_event_p (NAVSWITCH_SOUTH)) && (counter.bonus!= 0)) {
            ir_count = 0;
            counter.bonus--;
        }
        ir_count = destroy_wall (comms,objects,ir_count);
        for (k = 0; k < (NUM_ROW); k++) {
            if ((coin_pos_row[k] == WALL_ROW) && (wall_active_array[coin_pos_col[k]] == 1)) {
                wall_active_array[coin_pos_col[k]] = 0;
            }
            if ((coin_pos_row[k] == objects->player.row) && (coin_pos_col[k] == objects->player.col)) {
                coin_pos_col[k] = 5;
                counter.coin++;
                counter.score++;
            }
            else if ((coin_pos_row[k] == 1) && ((0 <= coin_pos_col[k]) && (coin_pos_col[k] <= (NUM_COL-1)))) {
                counter.coin = 0;
            }
            if (coin_pos_row[k] == 0) {
                coin_pos_row[k] = (NUM_ROW);
                coin_pos_col[k] = gen_Rand (coin_freq);
            }
        }
        if (counter.coin == ENOUGH_COINS){
            counter.coin = 0;
            if (counter.bonus < BONUS_MAX) {
                flag.bonus = 1;
            }
        }
        
        if (((objects->bonus.row == objects->player.row) && (objects->bonus.col == objects->player.col)) || (objects->bonus.row == 0)) {
            if ((objects->bonus.row == objects->player.row) && (objects->bonus.col == objects->player.col)) {
                counter.bonus++;
            }
            objects->bonus.col = gen_Rand (NUM_COL-1);
            objects->bonus.row = NUM_ROW;
            flag.bonus = 0;
        }
        if (counter.bonus>0) {
            led_set(LED1,1);
        }
        else {
            led_set(LED1,0);
        }
        
        if (i > COIN_MOVE_RATE) {
            i = 0;
            for (k = 0; k < (NUM_ROW); k++) {
                coin_pos_row[k] -= 1;
            }
            if (flag.bonus) {
                objects->bonus.row -=1;
            }
            coin_freq = coin_speed_increase(counter, coin_freq);
        }
        i++;
        flag = check_game_end (wall_active_array, flag);
        
    }
    startscreen_gameover(0);
    
    return 0;
}
